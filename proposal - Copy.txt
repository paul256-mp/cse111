CSE 111 Proposal for a Student Chosen Program

    (This is a proposal. All proposals are written with our best
    knowledge at the beginning of a project. As we progress from the
    beginning to the end of a project, we gain more knowledge, and we
    change some of our proposed ideas. This is part of completing any
    project and is fine.  However, we still must write a proposal so
    that our teachers or supervisors know what we intend to do. Please
    answer each of the following questions to the best of your
    knowledge.)

1. What is the title of your program?
password generator

2. What real-world problem will your program address or help to solve?
The program will help users generate strong, randomized passwords to enhance their online security. Weak or reused passwords are a major cybersecurity risk, and this tool will provide a quick and reliable way to create secure passwords.

3. What will you learn from developing this program?
How to use Python’s randomization capabilities effectively.

Best practices for handling user input and output.

Writing reusable and testable functions.

Implementing password strength rules (length, character variety).

Basic security considerations in password generation.

4. What Python modules will your program use?

random (for generating random characters)

string (for accessing predefined character sets like letters, digits, and symbols)

pytest (for testing functions)

    (Some examples are: csv, datetime, functools, matplotlib, math,
    pandas, pytest, random, requests, and tkinter.)

5. List the names of functions you will need?

generate_password(length, use_uppercase, use_digits, use_symbols)

Generates a password based on user-defined criteria.

Parameters: length (int), flags for including uppercase, digits, and symbols.

Returns: A randomized password string.

get_user_preferences()

Prompts the user for password preferences (length, character types).

Returns: A dictionary or tuple of user settings.

validate_length(length)

Ensures the password length is within a reasonable range (e.g., 8–64 characters).

Returns: True if valid, False otherwise.

main()

Orchestrates the program flow (calls other functions, prints the result)

    (Remember that the most reusable functions don't get user input and
    don't print results but instead have parameters and return a result.
    Functions that get user input and print results are important and do
    useful work but are not easily reusable.)

    (Remember also that it's hard to test functions that get user input
    and print results. It's easy to test functions that don't get user
    input and don't print results but instead have parameters and return
    a result. Therefore, you should write most of your program functions
    to have parameters and return a result.)

6. List the names of the test functions you will write.

test_generate_password_length()

Verifies that the generated password matches the requested length.

test_generate_password_contains_digits()

Checks if the password includes digits when requested.

test_generate_password_contains_symbols()

Checks if the password includes symbols when requested.

test_validate_length()

Tests if the length validator correctly accepts/rejects input.



